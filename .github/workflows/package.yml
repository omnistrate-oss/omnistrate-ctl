name: Package

on:
  push:
    paths:
    - build/Dockerfile
    branches: 
    - master
  pull_request:
    paths:
      - build/Dockerfile
    branches: 
    - master

env:
  GOPRIVATE: github.com/omnistrate
  GOPROXY: ${{ secrets.GOPROXY }}
  GOSUMDB: ${{ secrets.GOSUMDB }}
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # platforms to build the image for
  PLATFORMS: linux/arm64,linux/amd64  
  # default platform of the runners, used to mitigate time of building on x arch during PRs
  PR_PLATFORMS: linux/amd64
  # name of the package 
  PACKAGE_NAME: omnistrate-cli
  
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  package:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read

    concurrency:
      group: package-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
       
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CI_APP_ID }}
          private_key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with: 
          platforms: ${{ env.PLATFORMS }}
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,format=long

      - name: Build on ${{ env.PR_PLATFORMS }} only
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          platforms: ${{ env.PR_PLATFORMS }}
          build-args: |
              GIT_USER=api 
              GIT_TOKEN=${{ steps.generate_token.outputs.token }}
              GOPROXY=${{ secrets.GOPROXY }}
              GOSUMDB=${{ secrets.GOSUMDB }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  package-multi-arch:
    runs-on: ubicloud-standard-8
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: read

    concurrency:
      group: package-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
       
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CI_APP_ID }}
          private_key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with: 
          platforms: ${{ env.PLATFORMS }}
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,format=long

      # https://github.com/docker/build-push-action
      - name: Build and push multi-arch
        timeout-minutes: 20
        if: github.event_name != 'pull_request'
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          build-args: |
              GIT_USER=api 
              GIT_TOKEN=${{ steps.generate_token.outputs.token }}
              GOPROXY=${{ secrets.GOPROXY }}
              GOSUMDB=${{ secrets.GOSUMDB }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
