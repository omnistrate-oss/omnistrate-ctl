name: Release

on:
  release:
    types: ["published"]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # platforms to build the image for
  PLATFORMS: linux/arm64,linux/amd64
  # default platform of the runners, used to mitigate time of building on x arch during PRs
  PR_PLATFORMS: linux/amd64
  # name of the package
  PACKAGE_NAME: omnistrate-ctl

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Set up go
        timeout-minutes: 10
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          token: ${{ steps.generate_token.outputs.token }}
          cache-dependency-path: "**/go.sum"

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make tidy

      - name: Build
        timeout-minutes: 20
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build

      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Create compressed archive
        timeout-minutes: 2
        run: |
          cd dist
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip -9 "${{ steps.calc_binary_name.outputs.binary_name }}.zip" "${{ steps.calc_binary_name.outputs.binary_name }}"
          else
            tar -czf "${{ steps.calc_binary_name.outputs.binary_name }}.tar.gz" "${{ steps.calc_binary_name.outputs.binary_name }}"
          fi

      - name: Upload build artifacts
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}
          path: dist/${{ steps.calc_binary_name.outputs.binary_name }}

      - name: Upload compressed artifacts
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}-compressed
          path: |
            dist/${{ steps.calc_binary_name.outputs.binary_name }}.tar.gz
            dist/${{ steps.calc_binary_name.outputs.binary_name }}.zip

  sanity-check:
    needs: build
    permissions:
      contents: read

    strategy:
      matrix:
        os:
          [ubuntu-latest, macos-latest, windows-latest, ubicloud-standard-2-arm]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Run the binary (linux and macos only)
        id: run_binary_linux_macos
        timeout-minutes: 1
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export GOOS=darwin
            export GOARCH=arm64
          elif [ "${{ matrix.os }}" == "ubicloud-standard-2-arm" ]; then
            export GOOS=linux
            export GOARCH=arm64
          else
            export GOOS=linux
            export GOARCH=amd64
          fi

          binary_name="omnistrate-ctl-${GOOS}-${GOARCH}"
          cd $binary_name
          chmod +x $binary_name
          ctl_version=$(./$binary_name --version)
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"

      - name: Run the binary (windows only)
        id: run_binary_windows
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'
        run: |
          cd omnistrate-ctl-windows-amd64.exe
          $ctl_version=.\omnistrate-ctl-windows-amd64.exe --version
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> $env:GITHUB_OUTPUT

  sanity-check-go-releaser:
    needs: build
    permissions:
      contents: read

    strategy:
      matrix:
        os:
          [ubuntu-latest, macos-latest, windows-latest, ubicloud-standard-2-arm]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4
        with: 
          name: omnistrate-ctl

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Run the binary (linux and macos only)
        id: run_binary_linux_macos
        timeout-minutes: 1
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export GOOS=darwin
            export GOARCH=arm64
          elif [ "${{ matrix.os }}" == "ubicloud-standard-2-arm" ]; then
            export GOOS=linux
            export GOARCH=arm64
          else
            export GOOS=linux
            export GOARCH=amd64
          fi

          tar_file="omnistrate-ctl-${GOOS}-${GOARCH}"
          tar xzf "$tar_file"

          # The binary will be extracted to a directory named omnistrate-ctl
          chmod +x omnistrate-ctl
          ctl_version=$(./omnistrate-ctl --version)
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"

      - name: Run the binary (windows only)
        id: run_binary_windows
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'
        run: |
          $zipFile = "omnistrate-ctl_windows_amd64.zip"
          Expand-Archive -Path $zipFile -DestinationPath . -Force

          # Run version check on the extracted binary
          $ctl_version = .\omnistrate-ctl.exe --version
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> $env:GITHUB_OUTPUT

  release-binaries:
    environment: Prod
    runs-on: ubuntu-latest
    needs: sanity-check
    permissions:
      contents: read

    steps:
      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Generate token to create the release
        timeout-minutes: 5
        id: generate_token_cli
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CLI_APP_ID }}
          private_key: ${{ secrets.CLI_APP_PRIVATE_KEY }}

      - name: Upload binaries on a new release on cli repo
        timeout-minutes: 5
        uses: softprops/action-gh-release@v2
        with:
          files: |
            omnistrate-ctl-darwin-amd64/omnistrate-ctl-darwin-amd64
            omnistrate-ctl-darwin-arm64/omnistrate-ctl-darwin-arm64
            omnistrate-ctl-linux-amd64/omnistrate-ctl-linux-amd64
            omnistrate-ctl-linux-arm64/omnistrate-ctl-linux-arm64
            omnistrate-ctl-windows-amd64.exe/omnistrate-ctl-windows-amd64.exe
            omnistrate-ctl-windows-arm64.exe/omnistrate-ctl-windows-arm64.exe
            omnistrate-ctl-darwin-amd64-compressed/omnistrate-ctl-darwin-amd64.tar.gz
            omnistrate-ctl-darwin-arm64-compressed/omnistrate-ctl-darwin-arm64.tar.gz
            omnistrate-ctl-linux-amd64-compressed/omnistrate-ctl-linux-amd64.tar.gz
            omnistrate-ctl-linux-arm64-compressed/omnistrate-ctl-linux-arm64.tar.gz
            omnistrate-ctl-windows-amd64.exe-compressed/omnistrate-ctl-windows-amd64.exe.zip
            omnistrate-ctl-windows-arm64.exe-compressed/omnistrate-ctl-windows-arm64.exe.zip
          repository: omnistrate/cli
          token: ${{ steps.generate_token_cli.outputs.token }}
          fail_on_unmatched_files: true
          draft: false

  update-brew-formula:
    environment: Prod
    runs-on: ubuntu-latest
    needs:
      - build
      - release-binaries
    permissions:
      contents: read

    steps:
      - name: Get version
        id: get_version
        run: echo "version=${{ github.ref_name }}" | sed 's/\//\\\//g' >> "$GITHUB_OUTPUT"

      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Calculate SHA256 checksums
        id: calculate_sha256
        run: |
          sha_darwin_amd64=$(sha256sum omnistrate-ctl-darwin-amd64/omnistrate-ctl-darwin-amd64 | awk '{ print $1 }')
          sha_darwin_arm64=$(sha256sum omnistrate-ctl-darwin-arm64/omnistrate-ctl-darwin-arm64 | awk '{ print $1 }')
          sha_linux_amd64=$(sha256sum omnistrate-ctl-linux-amd64/omnistrate-ctl-linux-amd64 | awk '{ print $1 }')
          sha_linux_arm64=$(sha256sum omnistrate-ctl-linux-arm64/omnistrate-ctl-linux-arm64 | awk '{ print $1 }')
          echo "sha_darwin_amd64=${sha_darwin_amd64}" >> "$GITHUB_OUTPUT"
          echo "sha_darwin_arm64=${sha_darwin_arm64}" >> "$GITHUB_OUTPUT"
          echo "sha_linux_amd64=${sha_linux_amd64}" >> "$GITHUB_OUTPUT"
          echo "sha_linux_arm64=${sha_linux_arm64}" >> "$GITHUB_OUTPUT"

      - name: Generate token to update the formula
        timeout-minutes: 5
        id: generate_token_cli
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CLI_APP_ID }}
          private_key: ${{ secrets.CLI_APP_PRIVATE_KEY }}

      - name: Checkout Homebrew Tap repository
        timeout-minutes: 5
        uses: actions/checkout@v4
        with:
          repository: omnistrate/homebrew-tap
          token: ${{ steps.generate_token_cli.outputs.token }}

      - name: Display structure of repository
        timeout-minutes: 1
        run: ls -R

      - name: Update Formula
        timeout-minutes: 5
        run: |
          cd Formula
          sed -i'' -e 's/version "[^"]*"/version "${{ steps.get_version.outputs.version }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_darwin_amd64 = "[^"]*"/sha_darwin_amd64 = "${{ steps.calculate_sha256.outputs.sha_darwin_amd64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_darwin_arm64 = "[^"]*"/sha_darwin_arm64 = "${{ steps.calculate_sha256.outputs.sha_darwin_arm64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_linux_amd64 = "[^"]*"/sha_linux_amd64 = "${{ steps.calculate_sha256.outputs.sha_linux_amd64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_linux_arm64 = "[^"]*"/sha_linux_arm64 = "${{ steps.calculate_sha256.outputs.sha_linux_arm64 }}"/g' omnistrate-ctl.rb

      - name: Create Pull Request
        timeout-minutes: 5
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token_cli.outputs.token }}
          title: Update Omnistrate CTL Formula to ${{ steps.get_version.outputs.version }}
          body: |
            This PR updates the Omnistrate CTL Formula to version ${{ steps.get_version.outputs.version }}.
            The SHA256 checksums have been updated as well.
            Once the PR is merged, the new version will be available in the Omnistrate Homebrew Tap.
          commit-message: Update Omnistrate CTL Formula to ${{ steps.get_version.outputs.version }}
          signoff: true
          draft: false

      - uses: peter-evans/enable-pull-request-automerge@v3
        timeout-minutes: 5
        with:
          repository: omnistrate/homebrew-tap
          token: ${{ steps.generate_token_cli.outputs.token }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

  release-package-multi-arch:
    environment: Prod
    runs-on: ubuntu-latest
    needs: sanity-check
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    concurrency:
      group: package-${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long

      # https://github.com/docker/build-push-action
      - name: Build and push multi-arch
        timeout-minutes: 20
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./build/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # https://github.com/sigstore/cosign
      - name: Sign the images with GitHub OIDC Token **not production ready**
        run: cosign sign --yes ${TAGS}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}

  update-docs:
    name: Upldate CTL documents
    needs:
      - release-package-multi-arch
      - update-brew-formula
      - release-binaries
    uses: ./.github/workflows/docs-deploy.yml
    secrets: inherit
    with:
      environment: Prod

  notification:
    name: Notify Mattermost
    runs-on: ubuntu-latest
    needs:
      - release-package-multi-arch
      - update-brew-formula
      - release-binaries
      - update-docs
    steps:
      - name: Mattermost Notification
        uses: tferreira/matterfy@v1.9
        with:
          type: ${{ job.status }}
          job_name: "*Deploy to Prod*"
          url: ${{ secrets.MATTERMOST_DEPLOYMENT_NOTIFICATION_WEBHOOK }}
