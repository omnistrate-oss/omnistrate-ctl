name: Release

on:
  release:
    types: [ "published" ]
  workflow_dispatch:
  pull_request: 
    branches: [ "master" ] # TODO: Remove before merging
  

env:
  GOPRIVATE: "github.com/omnistrate/*"
  GOPROXY: ${{ secrets.GOPROXY }}
  GOSUMDB: ${{ secrets.GOSUMDB }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Generate token
        timeout-minutes: 5
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CI_APP_ID }}
          private_key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - name: Configure git for private repo access
        timeout-minutes: 5
        env:
          GH_ACCESS_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "machine github.com login api password ${GH_ACCESS_TOKEN}" > ~/.netrc

      - name: Set up go
        timeout-minutes: 10
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          token: ${{ steps.generate_token.outputs.token }}
          cache-dependency-path: '**/go.sum'

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make tidy

      - name: Build
        timeout-minutes: 20
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build
      
      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}
          path: dist/${{ steps.calc_binary_name.outputs.binary_name }}

  sanity-check:
    needs: build
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, ubicloud-standard-2-arm]
    
    runs-on: ${{ matrix.os }}

    steps: 
      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R
          
      - name: Run the binary (linux and macos only)
        id: run_binary_linux_macos
        timeout-minutes: 1
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export GOOS=darwin
            export GOARCH=arm64
          elif [ "${{ matrix.os }}" == "ubicloud-standard-2-arm" ]; then
            export GOOS=linux
            export GOARCH=arm64
          else
            export GOOS=linux
            export GOARCH=amd64
          fi

          binary_name="omnistrate-ctl-${GOOS}-${GOARCH}"
          cd $binary_name
          chmod +x $binary_name
          ctl_version=$(./$binary_name --version)
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"

      - name: Run the binary (windows only)
        id: run_binary_windows
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'
        run: |
          cd omnistrate-ctl-windows-amd64.exe
          $ctl_version=.\omnistrate-ctl-windows-amd64.exe --version
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> $env:GITHUB_OUTPUT
    
  release:
    runs-on: ubuntu-latest
    needs: sanity-check
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps: 
      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R
          
      - name: Generate token to create the release
        timeout-minutes: 5
        id: generate_token_cli
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CLI_APP_ID }}
          private_key: ${{ secrets.CLI_APP_PRIVATE_KEY }}

      - name: Upload binaries on a new release
        timeout-minutes: 5
        uses: softprops/action-gh-release@v1
        with:
            files: | 
              ${{ steps.calc_binary_name.outputs.binary_name }}/${{ steps.calc_binary_name.outputs.binary_name }}
            repository: omnistrate/cli
            token: ${{ steps.generate_token_cli.outputs.token }}
            fail_on_unmatched_files: true
            draft: true # TODO: Remove before merging

  update-brew-formula:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
    
    steps:
      - name: Get version
        id: get_version
        run: echo "version=${{ github.ref_name }}" | sed 's/\//\\\//g' >> "$GITHUB_OUTPUT"

      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Calculate SHA256 checksums
        id: calculate_sha256
        run: |
          sha_darwin_amd64=$(sha256sum omnistrate-ctl-darwin-amd64/omnistrate-ctl-darwin-amd64 | awk '{ print $1 }')
          sha_darwin_arm64=$(sha256sum omnistrate-ctl-darwin-arm64/omnistrate-ctl-darwin-arm64 | awk '{ print $1 }')
          sha_linux_amd64=$(sha256sum omnistrate-ctl-linux-amd64/omnistrate-ctl-linux-amd64 | awk '{ print $1 }')
          sha_linux_arm64=$(sha256sum omnistrate-ctl-linux-arm64/omnistrate-ctl-linux-arm64 | awk '{ print $1 }')
          echo "sha_darwin_amd64=${sha_darwin_amd64}" >> "$GITHUB_OUTPUT"
          echo "sha_darwin_arm64=${sha_darwin_arm64}" >> "$GITHUB_OUTPUT"
          echo "sha_linux_amd64=${sha_linux_amd64}" >> "$GITHUB_OUTPUT"
          echo "sha_linux_arm64=${sha_linux_arm64}" >> "$GITHUB_OUTPUT"

      - name: Generate token to update the formula
        timeout-minutes: 5
        id: generate_token_cli
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CLI_APP_ID }}
          private_key: ${{ secrets.CLI_APP_PRIVATE_KEY }}

      - name: Checkout Homebrew Tap repository
        timeout-minutes: 5
        uses: actions/checkout@v4
        with: 
          repository: omnistrate/homebrew-core
          token: ${{ steps.generate_token_cli.outputs.token }}

      - name: Display structure of repository
        timeout-minutes: 1
        run: ls -R

      - name: Update Formula
        timeout-minutes: 5
        run: |
          cd Formula
          sed -i'' -e 's/version "[^"]*"/version "${{ steps.get_version.outputs.version }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_darwin_amd64 = "[^"]*"/sha_darwin_amd64 = "${{ steps.calculate_sha256.outputs.sha_darwin_amd64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_darwin_arm64 = "[^"]*"/sha_darwin_arm64 = "${{ steps.calculate_sha256.outputs.sha_darwin_arm64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_linux_amd64 = "[^"]*"/sha_linux_amd64 = "${{ steps.calculate_sha256.outputs.sha_linux_amd64 }}"/g' omnistrate-ctl.rb
          sed -i'' -e 's/sha_linux_arm64 = "[^"]*"/sha_linux_arm64 = "${{ steps.calculate_sha256.outputs.sha_linux_arm64 }}"/g' omnistrate-ctl.rb
    
      - name: Create Pull Request
        timeout-minutes: 5
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate_token_cli.outputs.token }}
          title: Update Omnistrate CTL Formula to ${{ steps.get_version.outputs.version }}
          body: |
            This PR updates the Omnistrate CTL Formula to version ${{ steps.get_version.outputs.version }}.
            The SHA256 checksums have been updated as well.
            Once the PR is merged, the new version will be available in the Omnistrate Homebrew Tap.
          commit-message: Update Omnistrate CTL Formula to ${{ steps.get_version.outputs.version }}
          signoff: true
          draft: false
          
      - uses: peter-evans/enable-pull-request-automerge@v3
        timeout-minutes: 5
        with:
          repository: omnistrate/homebrew-core
          token: ${{ steps.generate_token_cli.outputs.token }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}