name: Release

on:
  release:
    types: [ "published" ]
  workflow_dispatch:
  pull_request:
    branches: [ "master" ]

env:
  GOPRIVATE: "github.com/omnistrate/*"
  GOPROXY: ${{ secrets.GOPROXY }}
  GOSUMDB: ${{ secrets.GOSUMDB }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Generate token
        timeout-minutes: 5
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CI_APP_ID }}
          private_key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - name: Configure git for private repo access
        timeout-minutes: 5
        env:
          GH_ACCESS_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "machine github.com login api password ${GH_ACCESS_TOKEN}" > ~/.netrc

      - name: Set up go
        timeout-minutes: 10
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          token: ${{ steps.generate_token.outputs.token }}
          cache-dependency-path: '**/go.sum'

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make tidy

      - name: Build
        timeout-minutes: 20
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build
      
      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}
          path: dist/${{ steps.calc_binary_name.outputs.binary_name }}

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps: 
      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}
          path: dist
          
      - name: Generate token to create the release
        timeout-minutes: 5
        id: generate_token_cli
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.CLI_APP_ID }}
          private_key: ${{ secrets.CLI_APP_PRIVATE_KEY }}

      - name: Upload binaries on a new release
        timeout-minutes: 5
        uses: softprops/action-gh-release@v1
        with:
            files: | 
              dist/${{ steps.calc_binary_name.outputs.binary_name }}
            repository: omnistrate/cli
            token: ${{ steps.generate_token_cli.outputs.token }}
            draft: true
          
  sanity-check:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        goarch: [amd64, arm64]

    steps: 
      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            set GOOS=windows
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            export GOOS=darwin
          else
            export GOOS=linux
          fi
          binary_name="omnistrate-ctl-${GOOS}-${{ matrix.goarch }}"
          if [ "${GOOS}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}
          path: dist
          
      - name: Run the binary (linux and macos only)
        timeout-minutes: 1
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x dist/${{ steps.calc_binary_name.outputs.binary_name }}
          ctl_version = $(dist/${{ steps.calc_binary_name.outputs.binary_name }} --version)
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"

      - name: Run the binary (windows only)
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'
        run: |
          dist/${{ steps.calc_binary_name.outputs.binary_name }} --version
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"
      
