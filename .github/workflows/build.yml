name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:
    branches: ["main"]

env:
  # test coverage threshold
  GOLANG_CI_VERSION: v2.1.1

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # security scan is included in linter
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "**/go.sum"

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          make download

      - name: golangci-lint
        timeout-minutes: 20
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANG_CI_VERSION }}
          args: ./...
          skip-cache: true

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check dependencies
        timeout-minutes: 10
        run: |
          make check-dependencies

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make download

      - name: Build
        timeout-minutes: 20
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build

      - name: Gotestsum installer
        uses: autero1/action-gotestsum@v2.0.0
        with:
          gotestsum_version: 1.11.0

      - name: Unit test
        timeout-minutes: 20
        run: |
          gotestsum --format github-actions -- ./... -skip test

  integration-tests:
    environment: Dev-us-west-2
    if: github.event_name != 'push'
    needs: [build, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: ${{ github.workflow }}-integration-tests
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: "**/go.sum"

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          make download

      - name: Gotestsum installer
        uses: autero1/action-gotestsum@v2.0.0
        with:
          gotestsum_version: 1.11.0

      - name: Integraiton test
        timeout-minutes: 30
        env:
          ENABLE_INTEGRATION_TEST: true
          TEST_EMAIL: ${{ secrets.SMOKE_TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.SMOKE_TEST_PASSWORD}}
          OMNISTRATE_ROOT_DOMAIN: ${{ vars.OMNISTRATE_ROOT_DOMAIN}}
          OMNISTRATE_DRY_RUN: true
        run: gotestsum --format github-actions -- ./test/integration_test/... -timeout 1800s -p 1 -p 1 -v

  compile:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Set up go
        timeout-minutes: 10
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          token: ${{ secrets.GITHUB_TOKEN }}
          cache-dependency-path: "**/go.sum"

      - name: Get dependencies
        timeout-minutes: 10
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make tidy

      - name: Build
        timeout-minutes: 20
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build

      - name: Calculate binary name
        timeout-minutes: 1
        id: calc_binary_name
        run: |
          binary_name="omnistrate-ctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Create compressed archive
        timeout-minutes: 2
        run: |
          cd dist
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip -9 "${{ steps.calc_binary_name.outputs.binary_name }}.zip" "${{ steps.calc_binary_name.outputs.binary_name }}"
          else
            tar -czf "${{ steps.calc_binary_name.outputs.binary_name }}.tar.gz" "${{ steps.calc_binary_name.outputs.binary_name }}"
          fi

      - name: Upload compressed artifacts
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.calc_binary_name.outputs.binary_name }}-compressed
          path: |
            dist/${{ steps.calc_binary_name.outputs.binary_name }}.tar.gz
            dist/${{ steps.calc_binary_name.outputs.binary_name }}.zip

  sanity-check:
    needs: compile
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Download build artifacts
        timeout-minutes: 5
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        timeout-minutes: 1
        run: ls -R

      - name: Extract compressed artifacts (linux and macos only)
        timeout-minutes: 2
        if: matrix.os != 'windows-latest'
        run: |
          # Extract all compressed archives to get individual binaries
          for dir in omnistrate-ctl-*-compressed/; do
            cd "$dir"
            for file in *.tar.gz; do
              if [ -f "$file" ]; then
                tar -xzf "$file"
              fi
            done
            cd ..
          done

      - name: Run the binary (linux and macos only)
        id: run_binary_linux_macos
        timeout-minutes: 1
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export GOOS=darwin
            export GOARCH=arm64
          elif [ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]; then
            export GOOS=linux
            export GOARCH=arm64
          else
            export GOOS=linux
            export GOARCH=amd64
          fi

          binary_name="omnistrate-ctl-${GOOS}-${GOARCH}"
          cd "${binary_name}-compressed"
          chmod +x $binary_name
          ctl_version=$(./$binary_name --version)
          echo "Omnistrate CTL version: $ctl_version"
          echo "ctl_version=$ctl_version" >> "$GITHUB_OUTPUT"

      - name: Extract compressed artifacts (windows only)
        timeout-minutes: 2
        if: matrix.os == 'windows-latest'
        run: |
          Write-Host "Starting Windows ZIP extraction..."
          
          cd omnistrate-ctl-windows-amd64.exe-compressed
          
          $zipFile = "omnistrate-ctl-windows-amd64.exe.zip"
          Write-Host "Extracting $zipFile to current directory..."
          Expand-Archive -Path $zipFile -DestinationPath . -Force
      
          Set-Location ..
          
          Write-Host "Windows ZIP extraction completed."

      - name: Display structure of uncompressed files
        timeout-minutes: 1
        run: ls -R

      - name: Run the binary (windows only)
        id: run_binary_windows
        timeout-minutes: 1
        if: matrix.os == 'windows-latest'
        run: |
          # First extract the AMD64 binary if it's not already extracted
          if (Test-Path "omnistrate-ctl-windows-amd64.exe-compressed") {
            cd omnistrate-ctl-windows-amd64.exe-compressed
            $ctl_version = .\omnistrate-ctl-windows-amd64.exe --version
            echo "Omnistrate CTL version: $ctl_version"
            echo "ctl_version=$ctl_version" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "AMD64 binary directory not found"
            exit 1
          }

  publish:
    if: github.event_name == 'push'
    needs: [build, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: Publish-'${{ github.workflow }}'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
